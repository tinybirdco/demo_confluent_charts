"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AWSSNSGenerator: () => AWSSNSGenerator,
  AblyGenerator: () => AblyGenerator,
  BaseGenerator: () => BaseGenerator,
  ConfluentCloudKafkaGenerator: () => ConfluentCloudKafkaGenerator,
  LogGenerator: () => LogGenerator,
  PRESET_SCHEMA_NAMES: () => PRESET_SCHEMA_NAMES,
  RabbitMQGenerator: () => RabbitMQGenerator,
  TinybirdGenerator: () => TinybirdGenerator,
  UpstashKafkaGenerator: () => UpstashKafkaGenerator,
  presetSchemas: () => presetSchemas_default,
  validateSchema: () => validateSchema
});
module.exports = __toCommonJS(src_exports);

// src/presetSchemas.ts
var presetSchemas = {
  "Simple Example": {
    some_int: {
      type: "number.int"
    },
    some_values: {
      type: "mockingbird.pick",
      params: [
        {
          values: [123, 456]
        }
      ]
    },
    values_weighted: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [123, 456, 789],
          weights: [90, 7, 3]
        }
      ]
    }
  },
  "eCommerce Transactions": {
    timestamp: {
      type: "mockingbird.timestampNow"
    },
    store_id: {
      type: "number.int",
      params: [
        {
          min: 1,
          max: 6
        }
      ]
    },
    browser: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: ["Chrome", "Brave", "Firefox", "Safari"],
          weights: [65, 3, 8, 20]
        }
      ]
    },
    product_id: {
      type: "number.int",
      params: [
        {
          min: 3278123,
          max: 3378123
        }
      ]
    },
    promo: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [0, 1],
          weights: [19, 1]
        }
      ]
    },
    sales: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [1, 2, 3, 4],
          weights: [50, 5, 2, 1]
        }
      ]
    },
    utm_source: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: ["instagram", "newsletter", "tiktok", "search_engine"],
          weights: [65, 13, 18, 20]
        }
      ]
    }
  },
  "Stock Prices": {
    amount: {
      type: "number.float"
    },
    date: {
      type: "mockingbird.datetimeNow"
    },
    stock_symbol: {
      type: "mockingbird.pick",
      params: [
        {
          values: [
            "ABF:XLON",
            "ADS:XETR",
            "APG:XNYS",
            "APPS:XMAD",
            "BLNK:XNAS",
            "BNZL:XLON",
            "CGNX:XNAS",
            "COHR:XNAS",
            "DBX:XNAS",
            "DECK:XNYS",
            "DNN:XNYS",
            "DOM:XMAD",
            "DV:XNYS",
            "EDP:XLIS",
            "EIX:XNYS",
            "GFC:XPAR",
            "GRE:XMAD",
            "INO:XNAS",
            "LFG:XNYS",
            "LIN:XNYS",
            "LOGN:XSWX",
            "MAC:XNYS",
            "MAT:XNAS",
            "NMTR:XNAS",
            "NSC:XNYS",
            "PACW:XNAS",
            "RGA:XNYS",
            "SDR:XLON",
            "SGO:XPAR",
            "TMO:XNYS",
            "TRE:XMAD",
            "TRIP:XNAS",
            "TRV:XNYS",
            "WB:XNAS",
            "ZTO:XNYS"
          ]
        }
      ]
    }
  },
  "Flight Bookings": {
    timestamp: {
      type: "mockingbird.timestampNow"
    },
    transaction_id: {
      type: "string.uuid"
    },
    name: {
      type: "person.fullName"
    },
    email: {
      type: "internet.email"
    },
    age: {
      type: "number.int",
      params: [
        {
          min: 18,
          max: 99
        }
      ]
    },
    passport_number: {
      type: "number.int",
      params: [
        {
          min: 3456789,
          max: 9876543
        }
      ]
    },
    flight_from: {
      type: "location.cityName"
    },
    flight_to: {
      type: "location.cityName"
    },
    extra_bags: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
          weights: [45, 35, 10, 4, 2, 1, 1, 1, 1]
        }
      ]
    },
    priority_boarding: {
      type: "datatype.boolean"
    },
    meal_choice: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: ["none", "vegan", "vegetarian", "halal", "kosher", "gluten"],
          weights: [60, 5, 10, 10, 10, 5]
        }
      ]
    },
    airline: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [
            "BrianAir",
            "Fizz",
            "EasyPlane",
            "Skittish Airways",
            "GAS",
            "Ler Dingus",
            "Red Balloon"
          ],
          weights: [20, 5, 15, 20, 15, 10, 15]
        }
      ]
    }
  },
  "Content Tracking": {
    timestamp: {
      type: "mockingbird.timestampNow"
    },
    userId: {
      type: "string.uuid"
    },
    contentId: {
      type: "number.int",
      params: [
        {
          min: 12345,
          max: 36923
        }
      ]
    },
    eventType: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [
            "click",
            "view more",
            "preview",
            "borrow",
            "place a hold",
            "share",
            "add to favorites",
            "add to list"
          ],
          weights: [60, 12, 33, 21, 20, 2, 5, 6]
        }
      ]
    },
    institutionID: {
      type: "number.int",
      params: [
        {
          min: 123,
          max: 369
        }
      ]
    }
  },
  "Web Analytics Starter Kit": {
    timestamp: {
      type: "mockingbird.timestampNow"
    },
    session_id: {
      type: "string.uuid"
    },
    action: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["page_hit"]
        }
      ]
    },
    version: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["1"]
        }
      ]
    },
    payload: {
      type: "mockingbird.pick",
      params: [
        {
          values: [
            '{ "user-agent":"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.79 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "locale":"en-US", "referrer":"https://www.kike.io", "pathname":"/blog-posts/data-market-whitebox-replaces-4-data-stack-tools-with-tinybird", "href":"https://www.tinybird.co/blog-posts/data-market-whitebox-replaces-4-data-stack-tools-with-tinybird"}',
            '{ "user-agent":"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; Googlebot/2.1; +http://www.google.com/bot.html) Chrome/104.0.5112.79 Safari/537.36", "locale":"en-US", ocation":"IT", "referrer":"https://www.hn.com", "pathname":"/guide/fine-tuning-csvs-for-fast-ingestion", "href":"https://www.tinybird.co/guide/fine-tuning-csvs-for-fast-ingestion"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0", "locale":"en-GB", "location":"ES", "referrer":"", "pathname":"/", "href":"https://www.tinybird.co"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:103.0) Gecko/20100101 Firefox/103.0", "locale":"en-US", "location":"US", "referrer":"https://www.google.com", "pathname":"/", "href":"https://www.tinybird.co"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36", "locale":"en-US", "location":"US", "referrer":"https://www.tinybird.co/why-tinybird", "pathname":"/pricing", "href":"https://www.tinybird.co/pricing"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36", "locale":"en-US", "location":"US", "referrer":"https://www.google.com", "pathname":"/product", "href":"https://www.tinybird.co/product"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36", "locale":"en-US", "location":"IL", "referrer":"https://www.google.com", "pathname":"/blog-posts/tips-5-adding-and-subtracting-intervals", "href":"https://www.tinybird.co/blog-posts/tips-5-adding-and-subtracting-intervals"}',
            '{ "user-agent":"Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1", "locale":"es-ES", "location":"ES", "referrer":"https://www.twitter.com", "pathname":"/", "href":"https://www.tinybird.co"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36", "locale":"en-US", "location":"GB", "referrer":"https://www.facebook.com", "pathname":"/", "href":"https://www.tinybird.co"}',
            '{ "user-agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36", "locale":"en-US", "location":"CH", "referrer":"https://www.qq.ch", "pathname":"guides", "href":"https://www.tinybird.co/guides"}',
            '{ "user-agent":"Mozilla/5.0 (Linux; Android 13) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.118 Mobile Safari/537.36", "locale":"en-US", "location":"US", "referrer":"https://www.yandex.com", "pathname":"/product", "href":"https://www.tinybird.co/product"}',
            '{ "user-agent":"Mozilla/5.0 (Linux; Android 13; SM-A102U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.5249.118 Mobile Safari/537.36", "locale":"en-US", "location":"FR", "referrer":"https://www.github.com", "pathname":"/pricing", "href":"https://www.tinybird.co/pricing"}'
          ]
        }
      ]
    }
  },
  "Log Analytics Starter Kit": {
    acceptcharset: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    acceptencoding: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["deflate, gzip", "gzip, deflate, br", "gzip"]
        }
      ]
    },
    acceptlanguage: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["en-GB,en-US;q=0.9,en;q=0.8", "unknown"]
        }
      ]
    },
    browsername: {
      type: "mockingbird.browserName"
    },
    browserversion: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["107.0", "107.0.0.0", "86.0.4240.80"]
        }
      ]
    },
    cachecontrol: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["max-age=0", "unknown", "no-cache"]
        }
      ]
    },
    city: {
      type: "location.cityName"
    },
    connection: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["Keep-Alive"]
        }
      ]
    },
    contentlength: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    contenttype: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    country: {
      type: "location.countryCode",
      params: ["alpha-2"]
    },
    cpuarchitecture: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown", "amd64"]
        }
      ]
    },
    devicemodel: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    devicetype: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    devicevendor: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    enginename: {
      type: "mockingbird.browserEngineName"
    },
    engineversion: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["107.0", "107.0.0.0", "86.0.4240.80"]
        }
      ]
    },
    event_ts: {
      type: "mockingbird.timestampNow"
    },
    from: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    headers: {
      type: "mockingbird.pick",
      params: [
        {
          values: [
            "accept,accept-encoding,connection,host,user-agent,x-forwarded-for,x-forwarded-host,x-forwarded-proto,x-real-ip,x-vercel-edge-region,x-vercel-id,x-vercel-ip-city,x-vercel-ip-country,x-vercel-ip-country-region,x-vercel-ip-latitude,x-vercel-ip-longitude,x-vercel-ip-timezone,x-vercel-proxied-for",
            "accept,accept-encoding,accept-language,cache-control,connection,host,sec-ch-ua,sec-ch-ua-mobile,sec-ch-ua-platform,sec-fetch-dest,sec-fetch-mode,sec-fetch-site,sec-fetch-user,upgrade-insecure-requests,user-agent,x-forwarded-for,x-forwarded-host,x-forwarded-proto,x-real-ip,x-vercel-edge-region,x-vercel-id,x-vercel-ip-city,x-vercel-ip-country,x-vercel-ip-country-region,x-vercel-ip-latitude,x-vercel-ip-longitude,x-vercel-ip-timezone,x-vercel-proxied-for",
            "accept,accept-encoding,accept-language,connection,host,sec-ch-ua,sec-ch-ua-mobile,sec-ch-ua-platform,sec-fetch-dest,sec-fetch-mode,sec-fetch-site,sec-fetch-user,upgrade-insecure-requests,user-agent,x-forwarded-for,x-forwarded-host,x-forwarded-proto,x-real-ip,x-vercel-edge-region,x-vercel-id,x-vercel-ip-city,x-vercel-ip-country,x-vercel-ip-country-region,x-vercel-ip-latitude,x-vercel-ip-longitude,x-vercel-ip-timezone,x-vercel-proxied-for"
          ]
        }
      ]
    },
    host: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["https://log-analytics.tinybird.co"]
        }
      ]
    },
    ip_address: {
      type: "mockingbird.pick",
      params: [
        {
          values: [
            "131.193.63.35",
            "136.51.218.209",
            "114.199.206.246",
            "5.56.231.189",
            "63.186.41.153",
            "88.192.158.134",
            "223.101.73.170",
            "61.35.129.108",
            "132.224.105.232",
            "125.229.8.125",
            "35.116.15.55",
            "135.103.19.171",
            "12.234.10.230",
            "244.50.216.166",
            "92.106.31.254",
            "164.172.162.6",
            "169.139.2.145",
            "187.104.128.230",
            "146.231.248.20",
            "73.37.121.172",
            "46.233.101.221",
            "38.139.152.20",
            "221.132.91.129",
            "242.221.17.93",
            "212.39.236.181",
            "150.147.164.150",
            "19.235.215.252",
            "33.70.179.57",
            "0.199.1.195",
            "241.248.60.81",
            "87.89.154.186",
            "0.205.245.230",
            "191.101.56.147",
            "142.244.241.167",
            "221.73.118.23",
            "137.116.138.105",
            "193.57.80.248",
            "7.138.8.8",
            "19.190.78.24",
            "247.5.181.70",
            "67.67.187.20",
            "2.174.213.137",
            "154.48.101.180",
            "75.173.26.25",
            "84.72.65.209",
            "41.227.234.157",
            "82.158.16.245",
            "159.113.221.220",
            "155.212.16.126",
            "217.237.64.201",
            "214.199.246.230",
            "20.235.163.219",
            "107.137.129.13",
            "206.182.165.24",
            "232.177.172.195",
            "188.218.192.103",
            "111.200.211.74",
            "159.174.148.204",
            "194.46.159.208",
            "96.27.126.107",
            "92.194.105.174",
            "9.79.157.249",
            "215.97.251.180",
            "188.146.152.7",
            "13.146.15.73",
            "200.62.24.238",
            "26.229.48.75",
            "113.56.136.232",
            "165.45.202.122",
            "112.81.47.101",
            "158.109.206.235",
            "118.49.62.165",
            "158.248.78.235",
            "166.181.249.157",
            "54.154.19.54",
            "231.253.232.206",
            "18.29.56.81",
            "172.16.60.94",
            "55.225.63.165",
            "85.219.165.210",
            "216.78.134.3",
            "192.65.52.162",
            "130.106.168.81",
            "238.121.229.154",
            "208.217.159.180",
            "46.38.34.68",
            "59.236.49.50",
            "14.2.127.20",
            "111.198.231.103",
            "143.189.199.178",
            "6.7.246.74",
            "201.43.78.217",
            "49.106.69.76",
            "194.89.12.52",
            "142.159.132.142",
            "97.131.215.242",
            "111.128.5.86",
            "115.243.65.248",
            "198.205.143.144",
            "89.219.76.53"
          ]
        }
      ]
    },
    isbot: {
      type: "mockingbird.pick",
      params: [
        {
          values: [0]
        }
      ]
    },
    latitude: {
      type: "location.latitude"
    },
    log_level: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: ["INFO", "WARN", "ERROR"],
          weights: [85, 12, 3]
        }
      ]
    },
    log_message: {
      type: "random.words",
      params: [10]
    },
    longitude: {
      type: "location.longitude"
    },
    method: {
      type: "internet.httpMethod"
    },
    origin: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    osname: {
      type: "mockingbird.osName"
    },
    osversion: {
      type: "system.semver"
    },
    protocol: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["https"]
        }
      ]
    },
    referer: {
      type: "mockingbird.searchEngineName"
    },
    region: {
      type: "location.countryCode",
      params: ["alpha-3"]
    },
    url: {
      type: "mockingbird.pickWeighted",
      params: [
        {
          values: [
            "https://log-analytics.tinybird.co/api/dummy/item",
            "https://log-analytics.tinybird.co/api/dummy/search",
            "https://log-analytics.tinybird.co/api/dummy/checkout",
            "https://log-analytics.tinybird.co/api/dummy/login",
            "https://log-analytics.tinybird.co/api/dummy/register",
            "https://log-analytics.tinybird.co/api/dummy/secretAPI"
          ],
          weights: [40, 30, 10, 5, 5, 10]
        }
      ]
    },
    useragent: {
      type: "internet.userAgent"
    },
    via: {
      type: "mockingbird.pick",
      params: [
        {
          values: ["unknown"]
        }
      ]
    },
    xforwaredforip: {
      type: "mockingbird.pick",
      params: [
        {
          values: [
            "131.193.63.35",
            "136.51.218.209",
            "114.199.206.246",
            "5.56.231.189",
            "63.186.41.153",
            "88.192.158.134",
            "223.101.73.170",
            "61.35.129.108",
            "132.224.105.232",
            "125.229.8.125",
            "35.116.15.55",
            "135.103.19.171",
            "12.234.10.230",
            "244.50.216.166",
            "92.106.31.254",
            "164.172.162.6",
            "169.139.2.145",
            "187.104.128.230",
            "146.231.248.20",
            "73.37.121.172",
            "46.233.101.221",
            "38.139.152.20",
            "221.132.91.129",
            "242.221.17.93",
            "212.39.236.181",
            "150.147.164.150",
            "19.235.215.252",
            "33.70.179.57",
            "0.199.1.195",
            "241.248.60.81",
            "87.89.154.186",
            "0.205.245.230",
            "191.101.56.147",
            "142.244.241.167",
            "221.73.118.23",
            "137.116.138.105",
            "193.57.80.248",
            "7.138.8.8",
            "19.190.78.24",
            "247.5.181.70",
            "67.67.187.20",
            "2.174.213.137",
            "154.48.101.180",
            "75.173.26.25",
            "84.72.65.209",
            "41.227.234.157",
            "82.158.16.245",
            "159.113.221.220",
            "155.212.16.126",
            "217.237.64.201",
            "214.199.246.230",
            "20.235.163.219",
            "107.137.129.13",
            "206.182.165.24",
            "232.177.172.195",
            "188.218.192.103",
            "111.200.211.74",
            "159.174.148.204",
            "194.46.159.208",
            "96.27.126.107",
            "92.194.105.174",
            "9.79.157.249",
            "215.97.251.180",
            "188.146.152.7",
            "13.146.15.73",
            "200.62.24.238",
            "26.229.48.75",
            "113.56.136.232",
            "165.45.202.122",
            "112.81.47.101",
            "158.109.206.235",
            "118.49.62.165",
            "158.248.78.235",
            "166.181.249.157",
            "54.154.19.54",
            "231.253.232.206",
            "18.29.56.81",
            "172.16.60.94",
            "55.225.63.165",
            "85.219.165.210",
            "216.78.134.3",
            "192.65.52.162",
            "130.106.168.81",
            "238.121.229.154",
            "208.217.159.180",
            "46.38.34.68",
            "59.236.49.50",
            "14.2.127.20",
            "111.198.231.103",
            "143.189.199.178",
            "6.7.246.74",
            "201.43.78.217",
            "49.106.69.76",
            "194.89.12.52",
            "142.159.132.142",
            "97.131.215.242",
            "111.128.5.86",
            "115.243.65.248",
            "198.205.143.144",
            "89.219.76.53"
          ]
        }
      ]
    }
  }
};
var presetSchemas_default = presetSchemas;

// src/generators/AWSSNSGenerator.ts
var import_client_sns = require("@aws-sdk/client-sns");
var import_zod2 = require("zod");

// src/generators/BaseGenerator.ts
var import_lodash2 = __toESM(require("lodash.get"), 1);
var import_zod = require("zod");

// src/extendedFaker.ts
var import_faker = require("@faker-js/faker");
var helpersModule = {
  weightedRandom(items, weights) {
    return import_faker.faker.helpers.weightedArrayElement(
      new Array(items.length).fill(null).map((_, i) => ({
        weight: weights[i],
        value: items[i]
      }))
    );
  },
  normalDistribution() {
    function boxMullerRandom() {
      let u = 0, v = 0;
      while (u === 0)
        u = Math.random();
      while (v === 0)
        v = Math.random();
      let num = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);
      num = num / 10 + 0.5;
      if (num > 1 || num < 0)
        return boxMullerRandom();
      return num;
    }
    return boxMullerRandom();
  }
};
var mockingbirdModule = {
  latitudeNumeric: () => import_faker.faker.location.latitude(),
  longitudeNumeric: () => import_faker.faker.location.longitude(),
  searchEngineName() {
    const searchEngines = [
      "https://www.google.co.uk/",
      "https://www.bing.com/",
      "https://duckduckgo.com/",
      "https://yandex.com/",
      "https://yahoo.com"
    ];
    return import_faker.faker.helpers.arrayElement(searchEngines);
  },
  osName() {
    const osNames = ["Linux", "Windows", "Mac OS"];
    return import_faker.faker.helpers.arrayElement(osNames);
  },
  browserName() {
    const browserNames = ["Chrome", "Firefox", "IE", "Opera"];
    return import_faker.faker.helpers.arrayElement(browserNames);
  },
  browserEngineName() {
    const browserEngineNames = ["Blink", "Gecko", "Trident"];
    return import_faker.faker.helpers.arrayElement(browserEngineNames);
  },
  datetimeNow: () => (/* @__PURE__ */ new Date()).toISOString().slice(0, 19),
  datetimeRecent: () => import_faker.faker.date.recent().toISOString().slice(0, 19),
  datetimeBetween: (params) => import_faker.faker.date.between({ from: params.start, to: params.end }).toISOString().slice(0, 19),
  timestampNow: () => (/* @__PURE__ */ new Date()).toISOString(),
  pickType: (params, opts) => {
    if (!opts)
      return;
    const state = opts.state;
    const key = `pickType.${JSON.stringify({
      type: params.type,
      length: params.length
    })}`;
    const arr = state[key] ?? new Array(params.length || 1).fill(null).map(() => import_faker.faker.datatype[params.type]());
    const value = arr.shift();
    state[key] = arr;
    return value;
  },
  pick: (params) => params.values[Math.floor(
    (!params.distribution || params.distribution === "random" ? Math.random() : helpersModule.normalDistribution()) * params.values.length
  )],
  pickWeighted: (params) => helpersModule.weightedRandom(params.values, params.weights),
  sequentialArray: (params, opts) => {
    if (!opts)
      return;
    const state = opts.state;
    const indexKey = `sequentialArray.${JSON.stringify(params.values)}.index`, iterationKey = `sequentialArray.${JSON.stringify(
      params.values
    )}.iteration`;
    let currentIndex = Number(state[indexKey] ?? 0), currentIteration = Number(state[iterationKey] ?? 0);
    if (currentIteration >= (params.iterations ?? 1)) {
      currentIndex = (currentIndex + 1) % params.values.length;
      currentIteration = 0;
    }
    const value = params.values[currentIndex];
    state[indexKey] = currentIndex;
    state[iterationKey] = currentIteration + 1;
    return value;
  }
};
var extendedFaker = {
  ...import_faker.faker,
  helpers: { ...import_faker.faker.helpers, ...helpersModule },
  mockingbird: mockingbirdModule
};
var extendedFaker_default = extendedFaker;

// src/types.ts
var import_lodash = __toESM(require("lodash.get"), 1);
var PRESET_SCHEMA_NAMES = [
  "Simple Example",
  "eCommerce Transactions",
  "Stock Prices",
  "Flight Bookings",
  "Content Tracking",
  "Web Analytics Starter Kit",
  "Log Analytics Starter Kit"
];
function validateSchema(schema) {
  const errors = [];
  for (const schemaItem of Object.values(schema)) {
    const { type, count } = schemaItem;
    if (typeof count !== "undefined" && count < 1)
      errors.push(`${type}: Count must be greater than 0`);
    if ("params" in schemaItem) {
      const generator = (0, import_lodash.default)(extendedFaker_default, type);
      try {
        generator(...schemaItem.params);
      } catch (e) {
        errors.push(
          `${type}: ${e && typeof e === "object" && "toString" in e ? e.toString() : "Unknown error"}`
        );
      }
    }
  }
  return { valid: !errors.length, errors };
}

// src/generators/BaseGenerator.ts
var schemaSchema = import_zod.z.record(
  import_zod.z.object({
    type: import_zod.z.string(),
    params: import_zod.z.any().optional(),
    count: import_zod.z.number().optional()
  })
);
var baseConfigSchema = import_zod.z.object({
  schema: schemaSchema.refine(
    (schemaSchema2) => validateSchema(schemaSchema2)
  ),
  eps: import_zod.z.number().optional().default(1),
  limit: import_zod.z.number().optional().default(-1),
  logs: import_zod.z.boolean().default(false).optional()
});
var BaseGenerator = class {
  constructor(config) {
    this.state = {};
    this.config = config;
  }
  log(level, message) {
    if (!this.config.logs)
      return;
    if (level === "info") {
      console.log(`INFO> ${message}`);
    } else if (level === "error") {
      console.error(console.log(`ERR > ${message}.`));
    }
  }
  generateRow() {
    const generatedRow = Object.entries(this.config.schema).reduce(
      (acc, [key, value]) => {
        const generator = (0, import_lodash2.default)(extendedFaker_default, value.type), params = value.params ?? [], count = value.count ?? 1;
        const generatedValues = new Array(count).fill(null).map(() => generator(...params, { state: this.state }));
        return {
          ...acc,
          [key]: count === 1 ? generatedValues[0] : generatedValues
        };
      },
      {}
    );
    return generatedRow;
  }
  async generate(onMessage) {
    const minDelayPerBatch = 200;
    const maxBatchesPerSecond = 1e3 / minDelayPerBatch;
    let batchSize, delayPerBatch;
    if (this.config.eps < 1e3) {
      batchSize = this.config.eps;
      delayPerBatch = 1e3;
    } else {
      batchSize = this.config.eps / maxBatchesPerSecond;
      delayPerBatch = minDelayPerBatch;
    }
    const rows = [];
    let limit = this.config.limit, sentRows = 0;
    while (true) {
      rows.push(this.generateRow());
      if (rows.length >= batchSize) {
        const data = rows.splice(0, batchSize);
        try {
          await this.sendData(data);
          if (onMessage)
            onMessage(data);
        } catch (e) {
          this.log("error", String(e));
          break;
        }
        sentRows += data.length;
        this.log("info", `${sentRows} rows sent so far...`);
        if (limit != -1 && sentRows >= limit)
          break;
        await new Promise((r) => setTimeout(r, delayPerBatch));
      }
    }
  }
};

// src/generators/AWSSNSGenerator.ts
var awsSNSConfigSchema = baseConfigSchema.merge(
  import_zod2.z.object({
    region: import_zod2.z.string(),
    accessKeyId: import_zod2.z.string(),
    secretAccessKey: import_zod2.z.string(),
    topicArn: import_zod2.z.string(),
    subject: import_zod2.z.string().optional(),
    snsOptions: import_zod2.z.any().optional()
  })
);
var AWSSNSGenerator = class extends BaseGenerator {
  constructor(config) {
    super(awsSNSConfigSchema.parse(config));
    this.client = new import_client_sns.SNSClient({
      ...this.config.snsOptions,
      region: this.config.region,
      credentials: {
        accessKeyId: this.config.accessKeyId,
        secretAccessKey: this.config.secretAccessKey
      }
    });
  }
  async sendData(rows) {
    await Promise.all(
      rows.map(
        (row) => this.client.send(
          new import_client_sns.PublishCommand({
            Message: JSON.stringify(row),
            Subject: this.config.subject,
            TopicArn: this.config.topicArn
          })
        ).then((data) => {
          this.log("info", `AWS SNS Response: ${JSON.stringify(data)}`);
        }).catch((err) => {
          this.log("error", `AWS SNS Error: ${JSON.stringify(err)}`);
        })
      )
    );
  }
};

// src/generators/AblyGenerator.ts
var import_cross_fetch = __toESM(require("cross-fetch"), 1);
var import_zod3 = require("zod");
var ablyConfigSchema = baseConfigSchema.merge(
  import_zod3.z.object({
    apiKey: import_zod3.z.string(),
    channelId: import_zod3.z.string()
  })
);
var AblyGenerator = class extends BaseGenerator {
  constructor(config) {
    super(ablyConfigSchema.parse(config));
    this.token = Buffer.from(this.config.apiKey).toString("base64");
  }
  async sendData(rows) {
    const url = new URL(
      `https://rest.ably.io/channels/${this.config.channelId}/messages`
    );
    await (0, import_cross_fetch.default)(url, {
      headers: {
        Authorization: `Basic ${this.token}`,
        "Content-Type": "application/json"
      },
      method: "POST",
      body: JSON.stringify({
        name: "publish",
        data: rows
      })
    }).then((res) => res.json()).then((res) => {
      if (this.config.logs) {
        this.log("info", `Ably Response: ${JSON.stringify(res)}`);
      }
    }).catch((err) => {
      this.log("error", `Ably Error: ${JSON.stringify(err)}`);
    });
  }
};

// src/generators/ConfluentCloudKafkaGenerator.ts
var import_cross_fetch2 = __toESM(require("cross-fetch"), 1);
var import_zod4 = require("zod");
var confluentCloudKafkaConfigSchema = baseConfigSchema.merge(
  import_zod4.z.object({
    restEndpoint: import_zod4.z.string().url(),
    clusterId: import_zod4.z.string(),
    topic: import_zod4.z.string(),
    apiKey: import_zod4.z.string(),
    apiSecret: import_zod4.z.string(),
    headers: import_zod4.z.array(import_zod4.z.record(import_zod4.z.string())).optional(),
    key: import_zod4.z.object({
      type: import_zod4.z.literal("BINARY"),
      data: import_zod4.z.string()
    }).or(
      import_zod4.z.object({
        type: import_zod4.z.literal("JSON"),
        data: import_zod4.z.record(import_zod4.z.string())
      })
    ).optional()
  })
);
var ConfluentCloudKafkaGenerator = class extends BaseGenerator {
  constructor(config) {
    super(confluentCloudKafkaConfigSchema.parse(config));
    this.token = Buffer.from(
      `${this.config.apiKey}:${this.config.apiSecret}`
    ).toString("base64");
  }
  async sendData(rows) {
    const url = `${this.config.restEndpoint}/kafka/v3/clusters/${this.config.clusterId}/topics/${this.config.topic}/records`;
    await Promise.all(
      rows.map(
        (row) => (0, import_cross_fetch2.default)(url, {
          headers: {
            Authorization: `Basic ${this.token}`,
            "Content-Type": "application/json"
          },
          method: "POST",
          body: JSON.stringify({
            headers: this.config.headers,
            timestamp: (/* @__PURE__ */ new Date()).toISOString(),
            key: this.config.key,
            value: {
              type: "JSON",
              data: row
            }
          })
        }).then((res) => res.json()).then((res) => {
          if (res.error_code !== 200) {
            throw new Error(res);
          }
          if (this.config.logs) {
            this.log(
              "info",
              `Confluent Kafka Response: ${JSON.stringify(res)}`
            );
          }
        }).catch((err) => {
          this.log("error", `Confluent Kafka Error: ${JSON.stringify(err)}`);
        })
      )
    );
  }
};

// src/generators/LogGenerator.ts
var LogGenerator = class extends BaseGenerator {
  constructor(config) {
    super(baseConfigSchema.parse(config));
  }
  async sendData(rows) {
    console.log(rows);
  }
};

// src/generators/RabbitMQGenerator.ts
var import_amqplib = __toESM(require("amqplib"), 1);
var import_zod5 = require("zod");
var rabbitmqConfigSchema = baseConfigSchema.merge(
  import_zod5.z.object({
    endpoint: import_zod5.z.string(),
    queue: import_zod5.z.string(),
    assertQueueOptions: import_zod5.z.object({
      exclusive: import_zod5.z.boolean().optional(),
      durable: import_zod5.z.boolean().optional(),
      autoDelete: import_zod5.z.boolean().optional(),
      arguments: import_zod5.z.any().optional(),
      messageTtl: import_zod5.z.number().optional(),
      expires: import_zod5.z.number().optional(),
      deadLetterExchange: import_zod5.z.string().optional(),
      deadLetterRoutingKey: import_zod5.z.string().optional(),
      maxLength: import_zod5.z.number().optional(),
      maxPriority: import_zod5.z.number().optional()
    }).optional(),
    publishOptions: import_zod5.z.object({
      expiration: import_zod5.z.string().or(import_zod5.z.number()).optional(),
      userId: import_zod5.z.string().optional(),
      CC: import_zod5.z.string().or(import_zod5.z.array(import_zod5.z.string())).optional(),
      mandatory: import_zod5.z.boolean().optional(),
      persistent: import_zod5.z.boolean().optional(),
      deliveryMode: import_zod5.z.boolean().or(import_zod5.z.number()).optional(),
      BCC: import_zod5.z.string().or(import_zod5.z.array(import_zod5.z.string())).optional(),
      contentType: import_zod5.z.string().optional(),
      contentEncoding: import_zod5.z.string().optional(),
      headers: import_zod5.z.any().optional(),
      priority: import_zod5.z.number().optional(),
      correlationId: import_zod5.z.string().optional(),
      replyTo: import_zod5.z.string().optional(),
      messageId: import_zod5.z.string().optional(),
      timestamp: import_zod5.z.number().optional(),
      type: import_zod5.z.string().optional(),
      appId: import_zod5.z.string().optional()
    }).optional()
  })
);
var RabbitMQGenerator = class extends BaseGenerator {
  constructor(config) {
    super(rabbitmqConfigSchema.parse(config));
  }
  async sendData(rows) {
    try {
      if (!this.connection) {
        this.connection = await import_amqplib.default.connect(this.config.endpoint);
      }
      const channel = await this.connection.createChannel();
      await channel.assertQueue(
        this.config.queue,
        this.config.assertQueueOptions
      );
      const sent = channel.sendToQueue(
        this.config.queue,
        Buffer.from(JSON.stringify(rows)),
        this.config.publishOptions
      );
      this.log("info", `RabbitMQ Response: ${JSON.stringify(sent)}`);
      await channel.close();
    } catch (err) {
      this.log("error", `RabbitMQ Error: ${JSON.stringify(err)}`);
      if (this.connection) {
        await this.connection.close();
        this.connection = void 0;
      }
    }
  }
};

// src/generators/TinybirdGenerator.ts
var import_cross_fetch3 = __toESM(require("cross-fetch"), 1);
var import_zod6 = require("zod");
var tinybirdConfigSchema = baseConfigSchema.merge(
  import_zod6.z.object({
    endpoint: import_zod6.z.string(),
    datasource: import_zod6.z.string(),
    token: import_zod6.z.string()
  })
);
var TinybirdGenerator = class extends BaseGenerator {
  constructor(config) {
    super(tinybirdConfigSchema.parse(config));
    this.endpoints = {
      eu_gcp: "https://api.tinybird.co",
      us_gcp: "https://api.us-east.tinybird.co"
    };
    this.events_path = "/v0/events";
  }
  async sendData(rows) {
    const params = { name: this.config.datasource, from: "mockingbird" };
    const endpointURL = this.config.endpoint in this.endpoints ? this.endpoints[this.config.endpoint] : this.config.endpoint;
    const url = new URL(`${endpointURL}${this.events_path}`);
    Object.entries(params).forEach(([k, v]) => url.searchParams.set(k, v));
    await (0, import_cross_fetch3.default)(url, {
      headers: {
        Authorization: `Bearer ${this.config.token}`
      },
      method: "POST",
      body: rows.map((d) => JSON.stringify(d)).join("\n")
    }).then((res) => {
      const contentType = res.headers.get("Content-Type");
      if (contentType && contentType.toLowerCase().indexOf("text") > -1) {
        return res.text();
      }
      return res.json();
    }).then((res) => {
      this.log("info", `Tinybird Response: ${JSON.stringify(res)}`);
    }).catch((err) => {
      this.log("error", `Tinybird Error: ${JSON.stringify(err)}`);
    });
  }
};

// src/generators/UpstashKafkaGenerator.ts
var import_cross_fetch4 = __toESM(require("cross-fetch"), 1);
var import_zod7 = require("zod");
var upstashKafkaConfigSchema = baseConfigSchema.merge(
  import_zod7.z.object({
    address: import_zod7.z.string().url(),
    user: import_zod7.z.string(),
    pass: import_zod7.z.string(),
    topic: import_zod7.z.string()
  })
);
var UpstashKafkaGenerator = class extends BaseGenerator {
  constructor(config) {
    super(upstashKafkaConfigSchema.parse(config));
    this.auth = Buffer.from(`${this.config.user}:${this.config.pass}`).toString(
      "base64"
    );
  }
  async sendData(rows) {
    const url = new URL(`${this.config.address}/produce/${this.config.topic}`);
    await Promise.all(
      rows.map(
        (row) => (0, import_cross_fetch4.default)(url, {
          headers: { Authorization: `Basic ${this.auth}` },
          method: "POST",
          body: JSON.stringify({ value: JSON.stringify(row) })
        }).then((res) => res.json()).then((metadata) => {
          if (metadata.error) {
            throw new Error(metadata.error);
          }
          this.log("info", `Upstash Response: ${JSON.stringify(metadata)}`);
        }).catch((err) => {
          this.log("error", `Upstash Error: ${JSON.stringify(err)}`);
        })
      )
    );
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSSNSGenerator,
  AblyGenerator,
  BaseGenerator,
  ConfluentCloudKafkaGenerator,
  LogGenerator,
  PRESET_SCHEMA_NAMES,
  RabbitMQGenerator,
  TinybirdGenerator,
  UpstashKafkaGenerator,
  presetSchemas,
  validateSchema
});
//# sourceMappingURL=index.cjs.map